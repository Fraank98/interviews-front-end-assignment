/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/recipes': {
    /** Get a list of recipes with optional filtering and pagination */
    get: {
      parameters: {
        query?: {
          /** @description The page number to retrieve */
          _page?: number;
          /** @description The number of recipes per page */
          _limit?: number;
          /** @description A full text search query */
          q?: string;
          /** @description Filter recipes by cuisine id */
          cuisineId?: string;
          /** @description Filter recipes by diet preference id (e.g., vegetarian, gluten-free) */
          dietId?: string;
          /** @description Filter recipes by difficulty level */
          difficultyId?: string;
          /** @description Embed relation in the data, this add difficulty, cuisine, diet object directy in the response */
          _expand?: ('difficulty' | 'cuisine' | 'diet')[];
        };
      };
      responses: {
        /** @description A list of recipes */
        200: {
          content: {
            'application/json': components['schemas']['Recipe'][];
          };
        };
      };
    };
    /** Add a new recipe */
    post: {
      requestBody?: {
        content: {
          'multipart/form-data': {
            name?: string;
            ingredients?: string[];
            instructions?: string;
            cuisineId?: string;
            dietId?: string;
            difficultyId?: string;
            /** Format: binary */
            image?: string;
          };
        };
      };
      responses: {
        /** @description Recipe created successfully */
        201: {
          content: never;
        };
      };
    };
  };
  '/recipes/{id}': {
    /** Get detailed information about a specific recipe */
    get: {
      parameters: {
        query?: {
          /** @description Embed relation in the data, this add difficulty, cuisine, diet object directy in the response */
          _expand?: ('difficulty' | 'cuisine' | 'diet')[];
        };
        path: {
          /** @description The unique identifier of the recipe */
          id: string;
        };
      };
      responses: {
        /** @description Detailed information about the recipe */
        200: {
          content: {
            'application/json': components['schemas']['Recipe'];
          };
        };
      };
    };
  };
  '/recipes/{id}/comments': {
    /** Get all comments and ratings for a specific recipe */
    get: {
      parameters: {
        path: {
          /** @description The unique identifier of the recipe */
          id: string;
        };
      };
      responses: {
        /** @description A list of comments and ratings for the recipe */
        200: {
          content: {
            'application/json': components['schemas']['Comment'][];
          };
        };
      };
    };
    /** Add a comment and rating to a specific recipe */
    post: {
      parameters: {
        path: {
          /** @description The unique identifier of the recipe */
          id: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': {
            comment?: string;
            rating?: number;
            /** Format: date-time */
            date?: string;
          };
        };
      };
      responses: {
        /** @description Comment and rating added successfully */
        201: {
          content: never;
        };
      };
    };
  };
  '/cuisines': {
    /** Get a list of all available cuisines */
    get: {
      responses: {
        /** @description A list of cuisines */
        200: {
          content: {
            'application/json': components['schemas']['Cuisine'][];
          };
        };
      };
    };
  };
  '/difficulties': {
    /** Get a list of all available difficulty levels */
    get: {
      responses: {
        /** @description A list of difficulty levels */
        200: {
          content: {
            'application/json': components['schemas']['Difficulty'][];
          };
        };
      };
    };
  };
  '/diets': {
    /** Get a list of all available diets preferences */
    get: {
      responses: {
        /** @description A list of diets preferences */
        200: {
          content: {
            'application/json': components['schemas']['Diet'][];
          };
        };
      };
    };
  };
  '/uploads/{imageName}': {
    /** Get the uploaded image */
    get: {
      parameters: {
        path: {
          /** @description The image name */
          imageName: string;
        };
      };
      responses: {
        /** @description The image */
        200: {
          content: {
            'image/*': string;
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Recipe: {
      id?: string;
      name?: string;
      ingredients?: string[];
      instructions?: string;
      cuisineId?: string;
      dietId?: string;
      difficultyId?: string;
      image?: string;
    };
    Comment: {
      id?: string;
      recipeId?: string;
      comment?: string;
      rating?: number;
      /** Format: date-time */
      date?: string;
    };
    Cuisine: {
      id?: string;
      name?: string;
    };
    Difficulty: {
      id?: string;
      name?: string;
    };
    Diet: {
      id?: string;
      name?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
